{"version":3,"sources":["../src/index.ts","../src/clerkClient.ts","../src/authenticateRequest.ts","../src/clerkExpressRequireAuth.ts","../src/clerkExpressWithAuth.ts","../src/utils.ts","../src/withAuth.ts","../src/requireAuth.ts"],"sourcesContent":["import {\n  Clerk,\n  clerkClient,\n  ClerkExpressRequireAuth,\n  ClerkExpressWithAuth,\n  createClerkClient,\n  setClerkApiKey,\n  setClerkApiVersion,\n  setClerkHttpOptions,\n  setClerkServerApiUrl,\n} from './clerkClient';\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\nimport type {\n  ClerkMiddleware,\n  ClerkMiddlewareOptions,\n  LooseAuthProp,\n  RequireAuthProp,\n  StrictAuthProp,\n  WithAuthProp,\n} from './types';\n\nexport * from '@clerk/backend';\n/**\n * The order of these exports is important, as we want Clerk from clerk/sdk-node\n * to shadow the Clerk export from clerk/backend, because it needs to support\n * 2 additional apis: clerk.expressWithAuth, clerk.expressRequireAuth\n */\nexport {\n  createClerkClient,\n  clerkClient,\n  setClerkApiKey,\n  setClerkApiVersion,\n  setClerkHttpOptions,\n  setClerkServerApiUrl,\n  Clerk,\n  ClerkExpressRequireAuth,\n  ClerkExpressWithAuth,\n};\n\nconst {\n  users,\n  smsMessages,\n  sessions,\n  emailAddresses,\n  phoneNumbers,\n  emails,\n  invitations,\n  organizations,\n  clients,\n  allowlistIdentifiers,\n  domains,\n} = clerkClient;\n\nexport {\n  users,\n  smsMessages,\n  sessions,\n  emailAddresses,\n  phoneNumbers,\n  emails,\n  invitations,\n  organizations,\n  clients,\n  allowlistIdentifiers,\n  domains,\n};\n\nexport default clerkClient;\n\nexport type { LooseAuthProp, StrictAuthProp, WithAuthProp, RequireAuthProp, ClerkMiddleware, ClerkMiddlewareOptions };\n\nexport { createClerkExpressRequireAuth };\nexport { createClerkExpressWithAuth };\n\nexport { withAuth } from './withAuth';\nexport { requireAuth } from './requireAuth';\n","import type { ClerkOptions, VerifyTokenOptions } from '@clerk/backend';\nimport { Clerk as _Clerk, decodeJwt, verifyToken as _verifyToken } from '@clerk/backend';\n\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\n\nexport const API_URL = process.env.CLERK_API_URL || 'https://api.clerk.dev';\nexport const API_VERSION = process.env.CLERK_API_VERSION || 'v1';\nexport const API_KEY = process.env.CLERK_SECRET_KEY || process.env.CLERK_API_KEY || '';\nexport const PUBLISHABLE_KEY = process.env.CLERK_PUBLISHABLE_KEY || '';\n\n/**\n * This needs to be a *named* function in order to support the older\n * new Clerk() syntax for v4 compatibility.\n * Arrow functions can never be called with the new keyword because they do not have the [[Construct]] method\n */\nexport function Clerk(options: ClerkOptions) {\n  const clerkClient = _Clerk(options);\n  const expressWithAuth = createClerkExpressWithAuth({ ...options, clerkClient });\n  const expressRequireAuth = createClerkExpressRequireAuth({ ...options, clerkClient });\n  const verifyToken = (token: string, verifyOpts?: VerifyTokenOptions) => {\n    const issuer = (iss: string) => iss.startsWith('https://clerk.') || iss.includes('.clerk.accounts');\n    return _verifyToken(token, { issuer, ...options, ...verifyOpts });\n  };\n\n  return {\n    ...clerkClient,\n    expressWithAuth,\n    expressRequireAuth,\n    verifyToken,\n    ...createBasePropForRedwoodCompatibility(),\n  };\n}\n\nconst createBasePropForRedwoodCompatibility = () => {\n  const verifySessionToken = (token: string) => {\n    const { payload } = decodeJwt(token);\n    return _verifyToken(token, {\n      issuer: payload.iss,\n      jwtKey: process.env.CLERK_JWT_KEY,\n    });\n  };\n  return { base: { verifySessionToken } };\n};\n\nexport const createClerkClient = Clerk;\n\nexport const clerkClient = Clerk({\n  secretKey: API_KEY,\n  apiKey: API_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  userAgent: '@clerk/clerk-sdk-node',\n});\n\n/**\n * Stand-alone express middlewares bound to the pre-initialised clerkClient\n */\nexport const ClerkExpressRequireAuth = createClerkExpressRequireAuth({\n  clerkClient,\n  apiUrl: API_URL,\n  apiKey: API_KEY,\n  secretKey: API_KEY,\n});\n\nexport const ClerkExpressWithAuth = createClerkExpressWithAuth({\n  clerkClient,\n  apiUrl: API_URL,\n  apiKey: API_KEY,\n  secretKey: API_KEY,\n});\n\n/**\n * Stand-alone setters bound to the pre-initialised clerkClient\n */\nexport const setClerkApiKey = (value: string) => {\n  clerkClient.__unstable_options.apiKey = value;\n};\n\nexport const setClerkServerApiUrl = (value: string) => {\n  clerkClient.__unstable_options.apiUrl = value;\n};\n\nexport const setClerkApiVersion = (value: string) => {\n  clerkClient.__unstable_options.apiVersion = value;\n};\n\nexport const setClerkHttpOptions = (value: RequestInit) => {\n  clerkClient.__unstable_options.httpOptions = value;\n};\n","import type { Clerk, RequestState } from '@clerk/backend';\nimport { constants } from '@clerk/backend';\nimport cookie from 'cookie';\nimport type { IncomingMessage, ServerResponse } from 'http';\n\nimport type { ClerkMiddlewareOptions } from './types';\n\nconst parseCookies = (req: IncomingMessage) => {\n  return cookie.parse(req.headers['cookie'] || '');\n};\n\nexport const authenticateRequest = (opts: {\n  clerkClient: ReturnType<typeof Clerk>;\n  apiKey: string;\n  secretKey: string;\n  frontendApi: string;\n  publishableKey: string;\n  req: IncomingMessage;\n  options?: ClerkMiddlewareOptions;\n}) => {\n  const { clerkClient, apiKey, secretKey, frontendApi, publishableKey, req, options } = opts;\n  const cookies = parseCookies(req);\n  const { jwtKey, authorizedParties } = options || {};\n  return clerkClient.authenticateRequest({\n    apiKey,\n    secretKey,\n    frontendApi,\n    publishableKey,\n    jwtKey,\n    authorizedParties,\n    cookieToken: cookies[constants.Cookies.Session] || '',\n    headerToken: req.headers[constants.Headers.Authorization]?.replace('Bearer ', '') || '',\n    clientUat: cookies[constants.Cookies.ClientUat] || '',\n    host: req.headers.host as string,\n    forwardedPort: req.headers[constants.Headers.ForwardedPort] as string,\n    forwardedHost: req.headers[constants.Headers.ForwardedHost] as string,\n    referrer: req.headers.referer,\n    userAgent: req.headers['user-agent'] as string,\n  });\n};\nexport const handleUnknownCase = (res: ServerResponse, requestState: RequestState) => {\n  if (requestState.isUnknown) {\n    res.writeHead(401, { 'Content-Type': 'text/html' });\n    res.end();\n  }\n};\n\nexport const handleInterstitialCase = (res: ServerResponse, requestState: RequestState, interstitial: string) => {\n  if (requestState.isInterstitial) {\n    res.writeHead(401, { 'Content-Type': 'text/html' });\n    res.end(interstitial);\n  }\n};\n\nexport const decorateResponseWithObservabilityHeaders = (res: ServerResponse, requestState: RequestState) => {\n  requestState.message && res.setHeader(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));\n  requestState.reason && res.setHeader(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));\n  requestState.status && res.setHeader(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));\n};\n","import type { Clerk } from '@clerk/backend';\n\nimport {\n  authenticateRequest,\n  decorateResponseWithObservabilityHeaders,\n  handleInterstitialCase,\n  handleUnknownCase,\n} from './authenticateRequest';\nimport type { ClerkMiddlewareOptions, MiddlewareRequireAuthProp, RequireAuthProp } from './types';\n\nexport type CreateClerkExpressMiddlewareOptions = {\n  clerkClient: ReturnType<typeof Clerk>;\n  /**\n   * @deprecated Use `secretKey` instead.\n   */\n  apiKey?: string;\n  /* Secret Key */\n  secretKey?: string;\n  /**\n   * @deprecated Use `publishableKey` instead.\n   */\n  frontendApi?: string;\n  publishableKey?: string;\n  apiUrl?: string;\n};\n\nexport const createClerkExpressRequireAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, frontendApi = '', apiKey = '', secretKey = '', publishableKey = '' } = createOpts;\n\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareRequireAuthProp => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options,\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await clerkClient.remotePrivateInterstitial();\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n\n      if (requestState.isSignedIn) {\n        (req as RequireAuthProp<any>).auth = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };\n        next();\n        return;\n      }\n\n      next(new Error('Unauthenticated'));\n    };\n  };\n};\n","import {\n  authenticateRequest,\n  decorateResponseWithObservabilityHeaders,\n  handleInterstitialCase,\n  handleUnknownCase,\n} from './authenticateRequest';\nimport type { CreateClerkExpressMiddlewareOptions } from './clerkExpressRequireAuth';\nimport type { ClerkMiddlewareOptions, MiddlewareWithAuthProp, WithAuthProp } from './types';\n\nexport const createClerkExpressWithAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, frontendApi = '', apiKey = '', secretKey = '', publishableKey = '' } = createOpts;\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareWithAuthProp => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options,\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await clerkClient.remotePrivateInterstitial();\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n\n      (req as WithAuthProp<any>).auth = {\n        ...requestState.toAuth(),\n        claims: requestState.toAuth().sessionClaims,\n      };\n      next();\n    };\n  };\n};\n","import type { IncomingMessage, ServerResponse } from 'http';\n\n// https://nextjs.org/docs/api-routes/api-middlewares#connectexpress-middleware-support\nexport function runMiddleware(req: IncomingMessage, res: ServerResponse, fn: (...args: any) => any) {\n  return new Promise((resolve, reject) => {\n    // @ts-ignore\n    void fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n      return resolve(result);\n    });\n  });\n}\n","import type { Request, Response } from 'express';\nimport type { IncomingMessage, ServerResponse } from 'http';\n\nimport { API_URL, clerkClient, PUBLISHABLE_KEY } from './clerkClient';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\nimport type { ClerkMiddlewareOptions, WithAuthProp } from './types';\nimport { runMiddleware } from './utils';\n\ntype ApiHandlerWithAuth<TRequest, TResponse> = (req: WithAuthProp<TRequest>, res: TResponse) => void | Promise<void>;\n\n// TODO: drop the Request/Response default values in v5 version\nexport function withAuth<TRequest = Request, TResponse = Response>(\n  handler: ApiHandlerWithAuth<TRequest, TResponse>,\n  options?: ClerkMiddlewareOptions,\n): any {\n  return async (req: TRequest, res: TResponse) => {\n    await runMiddleware(\n      req as IncomingMessage,\n      res as ServerResponse,\n      createClerkExpressWithAuth({\n        clerkClient,\n        apiUrl: API_URL,\n        publishableKey: PUBLISHABLE_KEY,\n      })(options),\n    );\n\n    return handler(req as WithAuthProp<TRequest>, res);\n  };\n}\n","import type { Request, Response } from 'express';\n\nimport { API_URL, clerkClient, PUBLISHABLE_KEY } from './clerkClient';\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport type { ClerkMiddlewareOptions, RequireAuthProp } from './types';\nimport { runMiddleware } from './utils';\n\ntype ExpressApiHandlerRequireAuth<T = any> = (req: RequireAuthProp<Request>, res: Response<T>) => void | Promise<void>;\n\nexport function requireAuth(handler: ExpressApiHandlerRequireAuth, options?: ClerkMiddlewareOptions): any {\n  return async (req: Request, res: Response) => {\n    await runMiddleware(\n      req,\n      res,\n      createClerkExpressRequireAuth({\n        clerkClient,\n        apiUrl: API_URL,\n        publishableKey: PUBLISHABLE_KEY,\n      })(options),\n    );\n\n    return handler(req as RequireAuthProp<Request>, res);\n  };\n}\n"],"mappings":"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","names":["import_backend","cookie","clerkClient","clerkClient","clerkClient","clerkClient","_Clerk","_verifyToken"]}