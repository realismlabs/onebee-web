import Head from "next/head";
import Image from "next/image";
import React, { useState } from "react";
import Link from "next/link";
import { CircleNotch, CheckCircle } from "@phosphor-icons/react";

export default function Login() {
  const [errorMessage, setErrorMessage] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [emailSent, setEmailSent] = useState(false);

  const resetPasswordWithDelay = async (
    password: string,
    confirmPassword: string
  ) => {
    setLoading(true); // Set loading to true before the delay

    await Promise.all([
      new Promise<void>((resolve) => {
        setTimeout(() => {
          setLoading(false); // Set loading back to false after the delay
          resolve();
        }, 1500);
      }),
      new Promise<void>((resolve) => {
        // Call mock API to send email here
        console.log("Password reset to", password, confirmPassword);
        resolve();
      }),
    ]);
    setLoading(false);
    setEmailSent(true); // Set emailSent to true after both Promises have resolved
  };

  // Handle Sign up
  const handleSubmit = async (event: any) => {
    event.preventDefault();
    // Here you can send the form data to your backend or perform any other necessary action.
    setErrorMessage("");

    // check if two passwords match
    if (password !== confirmPassword) {
      setErrorMessage("Passwords do not match.");
      return;
    }

    // check if passwords are long enough / valid
    if (password.length < 8) {
      setErrorMessage("Password must be at least 8 characters long.");
      return;
    }

    await resetPasswordWithDelay(password, confirmPassword);
  };

  return (
    <>
      <Head>
        <title>Dataland</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/favicon.ico" />
      </Head>
      <main
        className={`overflow-hidden flex h-screen flex-row justify-center items-center min-h-screen bg-slate-1`}
      >
        <div className="w-full flex flex-row flex-grow h-screen">
          <div className="w-full flex justify-center border-r border-slate-3">
            <div className="w-[600px] text-white flex flex-col pt-40 left-0 py-3 gap-2 sm:px-24 px-12 h-screen">
              <header className="fixed top-8">
                <Link href="/">
                  <Image
                    src="/images/logo_darker.svg"
                    width={80}
                    height={32}
                    alt="Dataland logo"
                  ></Image>
                </Link>
              </header>
              <h1 className="text-xl ">Reset password</h1>
              <div className="flex flex-col gap-4 mt-8 w-full">
                {/* Write a form input compoennt */}
                <form onSubmit={handleSubmit}>
                  <div className="flex flex-col gap-2">
                    <div className="mt-2 flex flex-row items-center">
                      <label
                        htmlFor="password"
                        className="text-white text-sm font-medium flex-grow"
                      >
                        New password
                      </label>
                    </div>
                    <div className="relative">
                      <input
                        type={showPassword ? "text" : "password"}
                        id="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        placeholder="•••••••••••••"
                        required
                        className={`w-full bg-slate-3 hover:bg-slate-4 border  text-white text-sm font-medium rounded-md px-3 py-2 placeholder-slate-9
                          ${
                            errorMessage !== ""
                              ? "border-red-9"
                              : "border-slate-6"
                          } 
                          `}
                      />
                      <button
                        className="absolute top-1/2 transform -translate-y-1/2 right-2 px-2 py-1 text-xs text-slate-11  hover:bg-slate-2 rounded-sm"
                        onClick={() => setShowPassword(!showPassword)}
                        type="button"
                      >
                        {showPassword ? "Hide" : "Show"}
                      </button>
                    </div>
                    <div className="mt-2 flex flex-row items-center">
                      <label
                        htmlFor="password"
                        className="text-white text-sm font-medium flex-grow"
                      >
                        Confirm new password
                      </label>
                    </div>
                    <div className="relative">
                      <input
                        type={showConfirmPassword ? "text" : "password"}
                        id="confirm-password"
                        value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                        placeholder="•••••••••••••"
                        required
                        className={`w-full bg-slate-3 hover:bg-slate-4 border  text-white text-sm font-medium rounded-md px-3 py-2 placeholder-slate-9
                          ${
                            errorMessage !== ""
                              ? "border-red-9"
                              : "border-slate-6"
                          } 
                          `}
                      />
                      <button
                        className="absolute top-1/2 transform -translate-y-1/2 right-2 px-2 py-1 text-xs text-slate-11  hover:bg-slate-2 rounded-sm"
                        onClick={() =>
                          setShowConfirmPassword(!showConfirmPassword)
                        }
                        type="button"
                      >
                        {showConfirmPassword ? "Hide" : "Show"}
                      </button>
                    </div>
                    {errorMessage && (
                      <div className="text-red-9 text-xs">{errorMessage}</div>
                    )}
                    <button
                      className={`bg-blue-600 text-white text-sm font-medium rounded-md px-4 py-2 flex flex-row gap-3 hover:bg-blue-700 justify-center h-10 items-center mt-4
                      ${loading ? "opacity-50 hover:bg-blue-600" : ""}`}
                      type="submit"
                      disabled={loading}
                    >
                      {loading ? (
                        <span className="animate-spin">
                          <CircleNotch width={20} height={20} />
                        </span>
                      ) : (
                        "Reset password"
                      )}
                    </button>
                    {emailSent && (
                      <div className="text-green-9 mt-2 text-xs p-4 flex flex-row gap-2 bg-slate-2 border border-slate-4 items-center rounded-md">
                        <CheckCircle
                          size={20}
                          weight="fill"
                          className="text-green-500"
                        />
                        <p>
                          {" "}
                          Password reset!{" "}
                          <Link
                            href="/login"
                            className="text-blue-500 hover:text-blue-600"
                          >
                            Log in
                          </Link>{" "}
                          to continue.
                        </p>
                      </div>
                    )}
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
